#####################################################
import csv
import sys
import os
import shutil
import argparse
from binarize_Data import *
from reject_boost import *
from filewrite_Actual_Rules_Per_RID import *
from prepare_Visualization import *


data_path="../Data/tmp/"
image_path="../Images/"
DB_path="../Images/DB/"
fname ='input_data_SHIMR'



def create_Dirs(dir_paths):
	for loc_path in dir_paths:
		if not os.path.exists(loc_path):
			os.makedirs(loc_path)

def initialize():
	d=0.5
	n_bins=7
	C_POS=1
	C_NEG=1
	size_U=3
	apply_rejection=False
	visualize=False	
	pt_disp=False
	plot_all=False


	parser=argparse.ArgumentParser(description='Usage of SHIMR')
	parser.add_argument('f_data', help='File path of input data to SHIMR. File format should be ".npy". The file should \
		contain data in the format of "[data_train, data_test, Feature_dict, class_labels_dict]". Feature_dict	is an \
		ordered dictionary (collections.OrderedDict()) to provide a short name of feature (Key) if it has long name (Value). \
		A typical example can be wdbc_dict["Rad_M"]= "Radius Mean". class_labels_dict is a class labels dictionary. A typical \
		example can be "class_labels_dict={-1:"Benign", +1:"Malignant", 0:"Rejected"}" .')
	parser.add_argument('-d', help='Set rejection cost', type=float)
	parser.add_argument('-n_bins', help='Set number of bins', type=int)
	parser.add_argument('-c_pos', help='Set regularization parameter value for positive class', type=float)
	parser.add_argument('-c_neg', help='Set regularization parameter value for negative class', type=float)
	parser.add_argument('-size_u', help='Set the order of feature interaction')
	parser.add_argument('-r', help='To apply rejection option', action="store_true")
	parser.add_argument('-v', help='To generate visualization', action="store_true")
	parser.add_argument('-pd', help='To display the plot (default: File saved)', action="store_true")
	parser.add_argument('-pa', help='To generate visualization for all subjects', action="store_true")
	args=parser.parse_args()

	if(args.f_data):
		f_data=args.f_data
	if(args.d):
		d=args.d
	if(args.n_bins):
		n_bins=args.n_bins
	if(args.c_pos):
		C_POS=args.c_pos
	if(args.c_neg):
		C_NEG=args.c_neg
	if(args.size_u):
		size_U=args.size_u
	if(args.v):
		visualize=True
	if(args.r):
		apply_rejection=True
	if(args.pd):
		pt_disp=True
	if(args.pa):
		plot_all=True

	# Create temporary directory for storing files generated by 'SHIMR'
	create_Dirs([data_path,image_path])

	return[f_data,d,n_bins,C_POS,C_NEG,size_U,apply_rejection,visualize,pt_disp,plot_all]




def display_Rules(predictor, filename_rules):
	### Load rules from file
	rule_list_data=pd.read_csv(filename_rules, header=None)
	rule_list_mat=rule_list_data.as_matrix()
	rule_list = rule_list_mat.ravel().tolist()

	fs_selected_all = predictor.feature_set 	# Selected features (by the model)
	indx_not_zero=np.where(predictor.primal_values!=0)[0] # Find the non zero weight indices of the selected features
	fs=np.array(fs_selected_all)[indx_not_zero]
	wt=predictor.primal_values[indx_not_zero]

	rules_all=[]
	for fs_tmp, w in zip(fs,wt):
		rule=[]		
		for item in fs_tmp:
			indx=int(item)
			rule.append(rule_list[indx])
		print(' and '.join(rule) + ' :{}'.format(w))
		rules_all.append(rule)
	# print(rules_all)


def do_Visualization(d,n_bins,data_path,image_path,data_test,X_test_binarized,Feature_dict,rb,class_labels_dict,pt_disp,plot_all):
	# Prepare the file names	
	filename_rules= data_path + 'Rule_List_' + 'nbins_'+ str(n_bins) + '.csv'	
	f_feature_range_array=data_path + 'Feature_range_array.npy'
	f_rule_array=data_path + 'Rule_array.npy'	
	f_Rules_Actual_with_Diag_test= data_path + 'actual_Rules_with_Diag_Per_RID_Test_' + str(d) +'.csv'
	f_itemset=data_path+'itemset_test.csv'
	dir_figure=image_path + 'Interaction_Plot_d_' + str(d) + '/'
	create_Dirs([dir_figure])
	
	write_Actual_Rules_with_Diag_per_RID(f_Rules_Actual_with_Diag_test, X_test_binarized, data_test, filename_rules, rb.result_train, rb.pred_proba_cal, rb.label_pred_all,f_itemset)
	visualize_main(n_bins,d,rb.predictor,filename_rules,Feature_dict,data_test,f_Rules_Actual_with_Diag_test,dir_figure,class_labels_dict,f_feature_range_array,f_rule_array,pt_disp,plot_all)
	





def run(f_data,d,n_bins,C_POS,C_NEG,size_U,apply_rejection,visualize,pt_disp,plot_all):		
	data_train, data_test, Feature_dict, class_labels_dict=np.load(f_data)

	X_train_binarized = data_train[:,2:]
	X_test_binarized = data_test[:,2:]
	
	while(d>0):		

		# Instantiate 'reject_boost(SHIMR)'
		rb=reject_boost(d, size_U, C_POS, C_NEG, data_path, fname)		

		# Fit SHIMR to train data
		rb.fit(X_train_binarized,data_train[:,1])

		# Apply fitted model on test data
		rb.test(X_test_binarized,data_test[:,1])

		if(visualize):
			do_Visualization(d,n_bins,data_path,image_path,data_test,X_test_binarized,Feature_dict,rb,class_labels_dict,pt_disp,plot_all)
			

		filename_rules = '../Data/Rule_List_ProPublica.csv'
		display_Rules(rb.predictor, filename_rules)


		if(apply_rejection):
			d=round((d-0.005),3)			
		else:
			break

	### Delete the temporary files ###
	if os.path.exists(data_path):
		shutil.rmtree(data_path)








if __name__=="__main__":	
	f_data,d,n_bins,C_POS,C_NEG,size_U,apply_rejection,visualize,pt_disp,plot_all=initialize()
	run(f_data,d,n_bins,C_POS,C_NEG,size_U,apply_rejection,visualize,pt_disp,plot_all)



	print('Done...')




